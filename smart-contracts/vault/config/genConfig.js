const fs = require("fs");
const path = require("path");
const Web3 = require("web3");

// Grab the network name from argv; default to "local"
const network = process.argv[2] || "local";

console.log(`üîß Generating VaultConfig for network: ${network}`);

// Read the configuration file
const configPath = path.join(__dirname, "vaultConfig.json");
const config = JSON.parse(fs.readFileSync(configPath, "utf8"));

// Validate network exists in config
if (!config[network]) {
  console.error(`‚ùå Error: Network '${network}' not found in config/vaultConfig.json`);
  console.error(`Available networks: ${Object.keys(config).join(", ")}`);
  process.exit(1);
}

const networkConfig = config[network];

// Validate required fields
const requiredFields = ['token1', 'token2', 'runTimestamp', 'stopTimestamp', 'maxShareholders'];
for (const field of requiredFields) {
  if (!networkConfig[field]) {
    console.error(`‚ùå Error: Missing required field '${field}' in network '${network}' configuration`);
    process.exit(1);
  }
}

// Helper function to get checksummed address
function checksum(addr) {
  return Web3.utils.toChecksumAddress(addr);
}

// Get token addresses
const token1Address = checksum(networkConfig.token1);
const token2Address = checksum(networkConfig.token2);

console.log(`üìù Token1 address: ${token1Address}`);
console.log(`üìù Token2 address: ${token2Address}`);

// Generate Solidity configuration file with selected network as primary
const sol = `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

/**
 * @title VaultConfig
 * @dev Configuration library for Vault deployment
 * @notice This file is auto-generated from config/vaultConfig.json for network: ${network}
 * @notice Do not edit this file directly - edit config/vaultConfig.json and run: node config/genConfig.js ${network}
 */
library VaultConfig {
    // Current Network Configuration (${network})
    address constant TOKEN1 = address(${token1Address});
    address constant TOKEN2 = address(${token2Address});
    uint256 constant RUN_TIMESTAMP = ${networkConfig.runTimestamp};
    uint256 constant STOP_TIMESTAMP = ${networkConfig.stopTimestamp};
    uint256 constant MAX_SHAREHOLDERS = ${networkConfig.maxShareholders};
}
`;

// Write the generated Solidity file
const outputPath = path.join(__dirname, "../src/VaultConfig.sol");
fs.writeFileSync(outputPath, sol);

console.log("‚úÖ Generated src/VaultConfig.sol from config/vaultConfig.json");
